import { createServer, IncomingMessage, Server, ServerResponse } from 'http'; // @@@ docs: https://nodejs.org/api/http.html
import { copyFileSync, readFile } from 'graceful-fs'; // @@@ docs: https://github.com/isaacs/node-graceful-fs#readme

import { getWatcher } from './watcher';
import { startTypescriptCompiler } from './watchingCompiler';
import { getSocketServer, sendToSocketClients } from './socketServer';
import { fetchContentType, fetchFilePathOnServer, SRC_DIR, WEB_ROOT_DIR } from './serverHelpers';
import { setupCleanupActions } from './processHelpers';
import { join, relative } from 'path';

/**
 * This is the port we want the server to run on: it's the number that you see
 * in a url like `localhost:3000`.
 *
 * @constant {number} APP_PORT
 */
const APP_PORT = 3000; // @@@ this is the port for the URL you navigate to in a browser

/**
 * The port for our socket (to enable live reloading) connection. This number
 * _must_ match the port number you give the socket in your client-side code.
 *
 * @constant {number} SOCKET_PORT
 */
const SOCKET_PORT = 3333; // @@@ this is the port for your _socket_ to connect to

/**
 * Used to actually process and respond to any requests the server receives.
 * This does most of the work: it gets the requests from the browser, checks
 * some things on them, etc.
 *
 * Right now, the `work` being done is just finding the file and getting its
 * contents, as well as then handling any errors or setting a `'Content-Type'`
 * header on our response before we send it.
 *
 * @param {http.IncomingMessage} request
 * @param {http.ServerResponse} response
 *
 * @requires [fs](https://nodejs.org/api/fs.html) (external link)
 */
const requestHandler = (request: IncomingMessage, response: ServerResponse) => {
  console.log(`Request: ${request.method} ${request.url}`);

  if (request.url === '/favicon.ico') {
    response.statusCode = 404;
    response.end();
    return;
  }

  const filePath = fetchFilePathOnServer(request);

  readFile(filePath, (error, fileData) => {
    if (error) {
      console.error(error);
      response.statusCode = 500;  // @@@ internal server error
      response.end('There was an error getting the request file.');
    } else {
      response.setHeader('Content-Type', fetchContentType(filePath));
      response.end(fileData);
    }
  });
};

const server: Server = createServer(requestHandler);
const typescriptCompiler = startTypescriptCompiler();
const socketServer = getSocketServer(SOCKET_PORT);

const srcFileWatcher = getWatcher(SRC_DIR, { ignored: /\.ts\s*$/ });
const handleSrcFileChange = (path: string, event: string) => {
  if (!path) { // TODO does chokidar also requires this checking?
    return;
  }
  const dest = join(WEB_ROOT_DIR, relative(SRC_DIR, path));
  const src = path;
  copyFileSync(src, dest);
}
srcFileWatcher.on('change', handleSrcFileChange);


const webFileWatcher = getWatcher(WEB_ROOT_DIR);
/**
 * Fired when we detect a `change` event from the file watcher.
 *
 * The Node docs specify that the `filename` argument is not always reliably
 * given on all systems; by making it optional (the `?` after `filename` in the
 * signature means optional) means that TypeScript will force us to handle the
 * maybe-not-there case. Here, we're just sending it; it's OK if it isn't there.
 *
 * It's important to realize, however, that since `filename` might be
 * `undefined`, we shouldn't use it to as the basis for any logic -- or if we
 * do, we need to make sure we deal with a situation where it isn't there, too.
 *
 * @param {string} [path]
 * @param {string} event
 */
const handleWebFileChange = (path: string, event: string) => {
  if (!path) {
    return;
  }
  const data: {} = {
    event,
    path,
    shouldReload: true
  };

  sendToSocketClients(socketServer, data);
};
// "change" is the event we want to act on
// `handleChange` is the function that should execute
//      when we receive the "change" event
webFileWatcher.on('change', handleWebFileChange);

/*
  Here, we send in a list of actions we want taken when the server shuts
  off (when we `ctrl-c`).
  Specifically:
    1. Stop the Typescript compiler process
    2. Shut down each client connection open on our `socketServer`
    3. Shut down the `socketServer` itself
    4. Shut down the `httpServer`
*/
setupCleanupActions([
  () => {
    console.error('Runtime TS compiler shutting down.');
    typescriptCompiler.kill(); // @@@ `kill` is a kind of signal sent to a process
  },
  () => {
    console.error('Socket server shutting down.');
    socketServer.clients.forEach(client => client.terminate());
    socketServer.close();
  },
  () => {
    console.error('Web server shutting down.');
    server.close();
  }
]);

/*
  The first argument is the port we want the `httpServer` to listen on.
  The second argument is the function we want executed after it starts listening on that port.
  If we didn't give it a port or gave it the wrong one, it wouldn't get any of
  the requests we sent it by visiting the site; it'd be like giving your friend
  the wrong phone number and waiting for them to text you -- you'd never get the
  message!
*/
server.listen(APP_PORT, () => {
  console.log(`Web server listening on port ${APP_PORT}`);
});
